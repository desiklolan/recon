#!/usr/bin/env python3
# Written by Rafe Hart (@rafael_hart)

import sys
import os
from config import *
from enumeratesubdomains import *
from enumeratelinks import *
from enumerateflaws import *

def print_results_summary(target):
    print_bold_green("Summary of results")
    count_results('Amass', target + "/" + target + ".amass.txt")
    count_results('Subfinder', target + "/" + target + ".subfinder.txt")
    count_results('DNSBuffer', target + "/" + target + ".bufferover.txt")
    count_results('Combined Amass, Subfinder & dnsbuffer', target + "/" + target + ".combined.txt")
    count_results('dnsgen | massdns', target + "/" + target + ".massdns.txt")
    count_results('Resolved Subdomains', target + "/" + "subdomains.resolved.txt")
    count_results('Non-wildcard domains', target + "/" + "subdomains.non-wildcard.txt")
    count_results('HTTP/HTTPS servers found', target + "/" + "responding_web_servers.txt")
    count_results('Hakrawler links found', target + "/" + "hakrawler.txt")
    count_results('Getallurls links found', target + "/" + "getallurls.txt")
    count_results("Combined links found", target + "/" + "urls.txt")
    show_dalfox_results(target + "/xss.results.txt")

def main():
    if len(sys.argv) == 1:
        print("\nUsage: recon example.com\nNOTE: You must have permission to scan this domain\n")
        sys.exit(1)
    target = sys.argv[1]

    run_checks(amass_config)

    # Discover subdomains with HTTP/HTTPS servers
    create_directory(target)
    run_amass(target, amass_config)
    run_assetfinder(target, FB_APP_ID, FB_APP_SECRET, VT_API_KEY, SPYSE_API_TOKEN)
    run_subfinder(target)
    run_dnsbuffer(target)
    combine_subdomain_results(target)
    run_dnsgen_and_massdns(target, massdns_resolvers)
    resolve_subdomains(target, infile=target +".massdns.txt", outfile="subdomains.resolved.txt")
    remove_wildcard_domains(target, infile="subdomains.resolved.txt", outfile="subdomains.non-wildcard.txt")
    find_web_servers(target, infile="subdomains.non-wildcard.txt", outfile="responding_web_servers.txt")

    # Discover URLs
    run_hakcrawler(target, infile="responding_web_servers.txt", outfile="hakrawler.txt")
    run_getallurls(target, outfile="getallurls.txt")
    combine_url_results(target, infile1="hakrawler.txt", infile2="getallurls.txt", outfile="urls.txt")

    # ------------------------------------------
    # Past this point we should be requiring an additional directive to actively scan

    # Find flaws
    run_dalfox(target, infile="urls.txt", outfile="xss.results.txt")



    # Summary
    print_results_summary(target)



if __name__ == '__main__':
    main()

'''
TODO:
* Add a domain regex check: ^(((?!-))(xn--|_{1,1})?[a-z0-9-]{0,61}[a-z0-9]{1,1}\.)*(xn--)?([a-z0-9][a-z0-9\-]{0,60}|[a-z0-9-]{1,30}\.[a-z]{2,})$
* Detect that assetfinder and other go modules have been installed
* Change all functions to follow a 'target, infile, outfile' pattern, so the workflow is easier to comprehend
* Confirm that the user has authorization to attack the target before running anything non-passive
* Allow excluding a text file of subdomains
* Need to test subdomain takeover: https://github.com/EdOverflow/can-i-take-over-xyz

'''